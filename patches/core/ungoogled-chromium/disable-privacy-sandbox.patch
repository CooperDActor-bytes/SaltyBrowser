--- a/chrome/browser/privacy_sandbox/privacy_sandbox_settings.cc
+++ b/chrome/browser/privacy_sandbox/privacy_sandbox_settings.cc
@@ -207,7 +207,7 @@ PrivacySandboxSettings::PrivacySandboxSe
 PrivacySandboxSettings::~PrivacySandboxSettings() = default;
 
 /*static*/ bool PrivacySandboxSettings::PrivacySandboxSettingsFunctional() {
-  return base::FeatureList::IsEnabled(features::kPrivacySandboxSettings);
+  return false;
 }
 
 bool PrivacySandboxSettings::IsFlocAllowed() const {
--- a/chrome/common/chrome_features.cc
+++ b/chrome/common/chrome_features.cc
@@ -782,7 +782,7 @@ const base::Feature kPrivacyReview{"Priv
 
 // Enables the privacy sandbox settings page.
 const base::Feature kPrivacySandboxSettings{"PrivacySandboxSettings",
-                                            base::FEATURE_ENABLED_BY_DEFAULT};
+                                            base::FEATURE_DISABLED_BY_DEFAULT};
 const base::FeatureParam<std::string> kPrivacySandboxSettingsURL{
     &kPrivacySandboxSettings, "website-url", "https://www.privacysandbox.com"};
 
--- a/components/privacy_sandbox/privacy_sandbox_prefs.cc
+++ b/components/privacy_sandbox/privacy_sandbox_prefs.cc
@@ -31,7 +31,7 @@ namespace privacy_sandbox {
 
 void RegisterProfilePrefs(PrefRegistrySimple* registry) {
   registry->RegisterBooleanPref(
-      prefs::kPrivacySandboxApisEnabled, true,
+      prefs::kPrivacySandboxApisEnabled, false,
       user_prefs::PrefRegistrySyncable::SYNCABLE_PREF);
   registry->RegisterBooleanPref(
       prefs::kPrivacySandboxManuallyControlled, false,
