--- a/chrome/browser/ungoogled_flag_entries.h
+++ b/chrome/browser/ungoogled_flag_entries.h
@@ -116,4 +116,8 @@
      "Hide Extensions Menu",
      "Hides the extensions menu (the puzzle piece icon). ungoogled-chromium flag.",
      kOsDesktop, SINGLE_VALUE_TYPE("hide-extensions-menu")},
+	{"disable-mdns",
+	 "Disable mDNS",
+	 "Disables mDNS and Service Discovery. ungoogled-chromium flag.",
+	 kOsAll, FEATURE_VALUE_TYPE(network::features::kDisableMdns)},
 #endif  // CHROME_BROWSER_UNGOOGLED_FLAG_ENTRIES_H_
--- a/content/browser/direct_sockets/resolve_host_and_open_socket.cc
+++ b/content/browser/direct_sockets/resolve_host_and_open_socket.cc
@@ -4,6 +4,7 @@
 
 #include "content/browser/direct_sockets/resolve_host_and_open_socket.h"
 
+#include "base/feature_list.h"
 #include "base/memory/scoped_refptr.h"
 #include "base/metrics/histogram_functions.h"
 #include "base/time/time.h"
@@ -14,6 +15,7 @@
 #include "net/base/ip_endpoint.h"
 #include "net/http/http_response_headers.h"
 #include "net/net_buildflags.h"
+#include "services/network/public/cpp/features.h"
 #include "services/network/public/cpp/resource_request.h"
 #include "services/network/public/cpp/simple_url_loader.h"
 #include "services/network/public/mojom/network_context.mojom.h"
@@ -31,6 +33,9 @@ constexpr int kHttpsPort = 443;
 
 #if BUILDFLAG(ENABLE_MDNS)
 bool ResemblesMulticastDNSName(const std::string& hostname) {
+  if (!base::FeatureList::IsEnabled(network::features::kDisableMdns) {
+    return false;
+  }
   return base::EndsWith(hostname, ".local") ||
          base::EndsWith(hostname, ".local.");
 }
@@ -368,4 +373,4 @@ void ResolveHostAndOpenUDPSocket::OnUdpC
   delete this;
 }
 
-}  // namespace content
\ No newline at end of file
+}  // namespace content
--- a/content/browser/direct_sockets/resolve_host_and_open_socket.cc
+++ b/content/browser/direct_sockets/resolve_host_and_open_socket.cc
@@ -33,7 +33,7 @@
 
 #if BUILDFLAG(ENABLE_MDNS)
 bool ResemblesMulticastDNSName(const std::string& hostname) {
-  if (!base::FeatureList::IsEnabled(network::features::kDisableMdns) {
+  if (!base::FeatureList::IsEnabled(network::features::kDisableMdns)) {
     return false;
   }
   return base::EndsWith(hostname, ".local") ||
--- a/net/dns/mdns_client_impl.cc
+++ b/net/dns/mdns_client_impl.cc
@@ -25,6 +25,7 @@
 #include "net/dns/public/util.h"
 #include "net/dns/record_rdata.h"
 #include "net/socket/datagram_socket.h"
+#include "services/network/public/cpp/features.h"
 
 // TODO(gene): Remove this temporary method of disabling NSEC support once it
 // becomes clear whether this feature should be
@@ -452,6 +452,8 @@ MDnsClientImpl::~MDnsClientImpl() {
 }
 
 int MDnsClientImpl::StartListening(MDnsSocketFactory* socket_factory) {
+  if (base::FeatureList::IsEnabled(network::features::kDisableMdns))
+    return ERR_ABORTED;
   DCHECK(!core_.get());
   core_ = std::make_unique<Core>(clock_, cleanup_timer_.get());
   int rv = core_->Init(socket_factory);
--- a/services/network/p2p/socket_manager.cc
+++ b/services/network/p2p/socket_manager.cc
@@ -9,6 +9,7 @@
 #include <utility>
 
 #include "base/bind.h"
+#include "base/feature_list.h"
 #include "base/memory/raw_ptr.h"
 #include "base/task/thread_pool.h"
 #include "base/threading/thread_task_runner_handle.h"
@@ -29,6 +30,7 @@
 #include "net/url_request/url_request_context_getter.h"
 #include "services/network/p2p/socket.h"
 #include "services/network/proxy_resolving_client_socket_factory.h"
+#include "services/network/public/cpp/features.h"
 #include "services/network/public/cpp/p2p_param_traits.h"
 #include "third_party/abseil-cpp/absl/types/optional.h"
 #include "third_party/webrtc/media/base/rtp_utils.h"
@@ -111,7 +113,7 @@ class P2PSocketManager::DnsRequest {
     net::HostPortPair host(host_name_, 0);
 
     net::HostResolver::ResolveHostParameters parameters;
-    if (enable_mdns_ && HasLocalTld(host_name_)) {
+    if (enable_mdns_ && HasLocalTld(host_name_) && !base::FeatureList::IsEnabled(features::kDisableMdns)) {
 #if BUILDFLAG(ENABLE_MDNS)
       // HostResolver/MDnsClient expects a key without a trailing dot.
       host.set_host(host_name_.substr(0, host_name_.size() - 1));
--- a/services/network/public/cpp/features.cc
+++ b/services/network/public/cpp/features.cc
@@ -15,6 +15,9 @@
 namespace network {
 namespace features {
 
+const base::Feature kDisableMdns{"DisableMdns",
+                                 base::FEATURE_DISABLED_BY_DEFAULT};
+
 // Enables Expect CT reporting, which sends reports for opted-in sites
 // that don't serve sufficient Certificate Transparency information.
 const base::Feature kExpectCTReporting{"ExpectCTReporting",
--- a/services/network/public/cpp/features.h
+++ b/services/network/public/cpp/features.h
@@ -14,6 +14,9 @@ namespace network {
 namespace features {
 
 COMPONENT_EXPORT(NETWORK_CPP)
+extern const base::Feature kDisableMdns;
+
+COMPONENT_EXPORT(NETWORK_CPP)
 extern const base::Feature kExpectCTReporting;
 COMPONENT_EXPORT(NETWORK_CPP)
 extern const base::Feature kNetworkErrorLogging;
