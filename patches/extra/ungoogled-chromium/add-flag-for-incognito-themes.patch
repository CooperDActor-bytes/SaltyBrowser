--- a/chrome/browser/ungoogled_flag_entries.h
+++ b/chrome/browser/ungoogled_flag_entries.h
@@ -112,4 +112,8 @@
      "Hide Extensions Menu",
      "Hides the extensions menu (the puzzle piece icon) that allows the user to control extensions site access.  ungoogled-chromium flag.",
      kOsDesktop, SINGLE_VALUE_TYPE("hide-extensions-menu")},
+    {"enable-incognito-themes",
+     "Enable themes in Incognito mode",
+     "Allows themes to override Google's built-in Incognito theming.  ungoogled-chromium flag.",
+     kOsAll, SINGLE_VALUE_TYPE("enable-incognito-themes")},
 #endif  // CHROME_BROWSER_UNGOOGLED_FLAG_ENTRIES_H_
--- a/chrome/browser/themes/theme_service.cc
+++ b/chrome/browser/themes/theme_service.cc
@@ -457,6 +457,10 @@
     const BrowserThemeProviderDelegate* delegate)
     : theme_helper_(theme_helper), incognito_(incognito), delegate_(delegate) {
   DCHECK(delegate_);
+  if (base::CommandLine::ForCurrentProcess()->HasSwitch("enable-incognito-themes")) {
+    dark_ntp_ = incognito_;
+    incognito_ = false;
+  }
 }

 ThemeService::BrowserThemeProvider::~BrowserThemeProvider() = default;
@@ -475,6 +475,8 @@
   }

   ReportHistogramBooleanUsesColorProvider(false);
+  if (base::CommandLine::ForCurrentProcess()->HasSwitch("enable-incognito-themes"))
+    return theme_helper_.GetColor(id, dark_ntp_ && id == TP::COLOR_NTP_BACKGROUND, GetThemeSupplier());
   return theme_helper_.GetColor(id, incognito_, GetThemeSupplier());
 }

--- a/chrome/browser/themes/theme_service.h
+++ b/chrome/browser/themes/theme_service.h
@@ -251,6 +251,7 @@

     const ThemeHelper& theme_helper_;
     bool incognito_;
+    bool dark_ntp_ = false;
     raw_ptr<const BrowserThemeProviderDelegate> delegate_;
   };
   friend class BrowserThemeProvider;
--- a/chrome/browser/ui/views/frame/browser_frame.cc
+++ b/chrome/browser/ui/views/frame/browser_frame.cc
@@ -248,8 +248,9 @@
 BrowserFrame::GetCustomTheme() const {
   Browser* browser = browser_view_->browser();
   // If this is an incognito profile, there should never be a custom theme.
-  if (browser->profile()->IsIncognitoProfile())
+  if (browser->profile()->IsIncognitoProfile() &&
+      !base::CommandLine::ForCurrentProcess()->HasSwitch("enable-incognito-themes"))
     return nullptr;
   auto* app_controller = browser->app_controller();
   // Ignore GTK+ for web apps with window-controls-overlay as the
   // display_override so the web contents can blend with the overlay by using
@@ -382,7 +382,8 @@
   // Select between regular, dark and GTK theme.
   ui::NativeTheme* native_theme = ui::NativeTheme::GetInstanceForNativeUi();

-  if (browser_view_->browser()->profile()->IsIncognitoProfile()) {
+  if (browser_view_->browser()->profile()->IsIncognitoProfile() &&
+      !base::CommandLine::ForCurrentProcess()->HasSwitch("enable-incognito-themes")) {
     // No matter if we are using the default theme or not we always use the dark
     // ui instance.
     SetNativeTheme(ui::NativeTheme::GetInstanceForDarkUI());
